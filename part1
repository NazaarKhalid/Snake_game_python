import turtle
import time  #to include a delay
import random

delay = 0.1
score = 0
high_score = 0
number = 0

# Main screen

window = turtle.Screen()
window.title("Snake Game")
window.bgcolor("light blue")
window.setup(width=600, height=600)
window.tracer(0)  # turns off animation/screen updates, helps keep the module go as fast as possible

# snake head
head = turtle.Turtle()  # created a new turtle object snake head
head.speed(0)  # animation speed, 0 is the fastest
head.shape("square")
head.color("black")
head.penup()  # so it does not draw lines as it usually does
head.goto(0, 0)  # head will start at center of the screen
head.direction = "stop"  # when it starts, head will stay there

# snake food
food = turtle.Turtle()  # created a new turtle object food
food.speed(0)
food.shape("circle")
food.color("red")
food.penup()
food.goto(0, 100)

# snake body list
segments = []

# score_

score_ = turtle.Turtle()
score_.speed(0)
score_.shape("square")
score_.color("white")
score_.penup()
score_.hideturtle()
score_.goto(0, 260)
score_.write("Score: 0  High score: 0", align="center", font=("Courirer", 24, "normal"))


# functions
def move():
    if head.direction == "up":
        y = head.ycor()
        head.sety(y + 20)  # head will move by 20 in y coordinate

    if head.direction == "down":
        y = head.ycor()
        head.sety(y - 20)  # head will move by -20 in y coordinate

    if head.direction == "right":
        x = head.xcor()
        head.setx(x + 20)  # head will move by 20 in x coordinate

    if head.direction == "left":
        x = head.xcor()
        head.setx(x - 20)  # head will move by -20 in x coordinate


def go_up():
    if head.direction != "down":
        head.direction = "up"


def go_down():
    if head.direction != "up":
        head.direction = "down"


def go_right():
    if head.direction != "left":
        head.direction = "right"


def go_left():
    if head.direction != "right":
        head.direction = "left"


def game_over():
    global segment
    global score
    global high_score
    time.sleep(1)  # stops screen for a second
    head.goto(0, 0)
    head.direction = "stop"
    for segment in segments:
        segment.goto(1000, 1000)  # Move off screen

    segments.clear()
    score = 0
    score_.clear()
    score_.write(f"Score: {score}  High score: {high_score}", align="center", font=("Courirer", 24, "normal"))


# Keyboard binding

window.listen()
window.onkeypress(go_up, "w")
window.onkeypress(go_down, "s")
window.onkeypress(go_left, "a")
window.onkeypress(go_right, "d")  # careful not to add parenthesis to the implementation

# Main game loop
while True:
    window.update()  # everytime this loop is triggered, screen is updated

    if head.xcor() > 290 or head.xcor() < -290 or head.ycor() > 290 or head.ycor() < -290:
        game_over()

    if head.distance(food) < 20:  # in simple words, the two objects collided
        x = random.randint(-290, 290)
        y = random.randint(-290, 290)
        food.goto(x, y)

        # adding a new segment i.e snake body
        new_segment = turtle.Turtle()  # created a new turtle object segment
        new_segment.speed(0)
        new_segment.shape("square")

        if number % 2 == 0:
            new_segment.color("pink")
        else:
            new_segment.color("lavender")
        number += 1
        new_segment.penup()
        segments.append(new_segment)


        #increasing score
        score += 10
        score_.clear()
        score_.write(f"Score: {score}  High score: {high_score}", align="center", font=("Courirer", 24, "normal"))

        if score > high_score:
            high_score = score
            score_.clear()
            score_.write(f"Score: {score}  High score: {high_score}", align="center", font=("Courirer", 24, "normal"))

    for segment in segments:
        if segment.distance(head) < 20:
            game_over()

    # move end segment in a reverse order
    for index in range(len(segments) - 1, 0, -1):  #range(end, start, decrement)
        x = segments[index - 1].xcor()
        y = segments[index - 1].ycor()
        segments[index].goto(x, y)

    # move segment to where head is
    if len(segments) > 0:
        x = head.xcor()
        y = head.ycor()
        segments[0].goto(x, y)  # top of the body follows the head

    move()

    time.sleep(delay)

window.mainloop()  # will keep the window open
